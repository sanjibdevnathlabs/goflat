name: build
on:
  push:
    branches:
      - master # Run on pushes to master
  pull_request: # Run on pull requests targeting master
    branches:
      - master

# Add permissions for benchmark commenting and data push
permissions:
  contents: write # Needed for auto-push benchmark data
  pull-requests: write # Needed for commenting

jobs:
  test:
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        # Test on Go 1.23 and latest stable Go version
        go: ['1.23.0', 'stable']

    name: Test (Go ${{ matrix.go }})
    runs-on: ubuntu-latest
    # Allow the stable Go build to fail without failing the entire workflow
    continue-on-error: ${{ matrix.go == 'stable' }}

    steps:

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Check out code
      uses: actions/checkout@v4
      with:
        # Fetch all history for comparisons and baseline storage
        fetch-depth: 0
        # Explicitly checkout the ref to potentially avoid branch conflicts
        ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

    - name: Lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest

    - name: Test & Coverage
      run: |
        go test -race -coverprofile=coverage.out -covermode=atomic ./...

    # Step to upload coverage report to Codecov
    # To enable:
    # 1. Sign up at https://about.codecov.io/
    # 2. Add the CODECOV_TOKEN secret to your GitHub repository settings
    # 3. Uncomment the following lines:
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: ${{ github.repository }}

    # Add step to calculate total coverage percentage
    - name: Calculate Coverage Percentage
      id: coverage
      # Run for all Go versions
      run: |
        echo "total_coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')" >> $GITHUB_OUTPUT

    # Add step to comment coverage percentage on PRs
    - name: Comment Coverage Percentage
      uses: actions/github-script@v7
      # Run for all Go versions on PRs
      if: github.event_name == 'pull_request'
      with:
        script: |
          const coverage = "${{ steps.coverage.outputs.total_coverage }}";
          const goVersion = "${{ matrix.go }}";
          if (!coverage) {
            console.log('Coverage percentage not found for Go ' + goVersion);
            return;
          }
          const commentBody = `ðŸ“Š Code Coverage (Go ${goVersion}): **${coverage}**`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck
      run: govulncheck ./...

    # Add benchmark step
    - name: Run Benchmarks
      # Run for all Go versions in matrix
      run: go test -bench=. -benchmem ./... | tee output-${{ matrix.go }}.txt

    # Add step to comment raw benchmark output on PRs
    - name: Comment raw benchmark output
      uses: actions/github-script@v7
      # Run for all Go versions on PRs
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const goVersion = "${{ matrix.go }}";
          const output = fs.readFileSync(`output-${goVersion}.txt`, 'utf8');
          const commentBody = `
          <details><summary>Raw Benchmark Output (Go ${goVersion})</summary>

          \`\`\`
          ${output}
          \`\`\`
          </details>
          `;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

    # Add benchmark comparison/storage step
    - name: Store/Compare benchmark result
      # Run for all Go versions in matrix
      uses: benchmark-action/github-action-benchmark@v1
      with:
        # What benchmark tool the output.txt file is
        tool: 'go'
        # Where the output from the benchmark tool is stored
        output-file-path: output-${{ matrix.go }}.txt # Use versioned output file
        # Workflow will fail when an alert happens
        fail-on-alert: true
        # Name of the benchmark run (include Go version)
        name: Go Benchmark (${{ matrix.go }})
        # GitHub API token
        github-token: ${{ secrets.GITHUB_TOKEN }}
        # Store/fetch data to/from the master branch instead of gh-pages
        gh-pages-branch: master
        # Push data to the data branch only on master pushes
        auto-push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        # Comment on pull requests benchmark results
        comment-on-alert: true
        summary-always: true # Always add a summary table
