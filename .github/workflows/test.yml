name: build
on:
  push:
    branches:
      - master # Run on pushes to master
  pull_request: # Run on pull requests targeting master
    branches:
      - master

# Add permissions for benchmark commenting
permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails
      matrix:
        # Test on Go 1.23 and latest stable Go version
        go: ['1.23.0', 'stable']

    name: Test (Go ${{ matrix.go }})
    runs-on: ubuntu-latest
    # Allow the stable Go build to fail without failing the entire workflow
    continue-on-error: ${{ matrix.go == 'stable' }}

    steps:

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Check out code
      uses: actions/checkout@v4

    - name: Lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest

    - name: Test & Coverage
      run: |
        go test -race -coverprofile=coverage.out -covermode=atomic ./...

    # Step to upload coverage report to Codecov
    # To enable:
    # 1. Sign up at https://about.codecov.io/
    # 2. Add the CODECOV_TOKEN secret to your GitHub repository settings
    # 3. Uncomment the following lines:
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: ${{ github.repository }}

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck
      run: govulncheck ./...

    # Add benchmark step
    - name: Run Benchmarks
      # Only run benchmarks on the primary Go version for efficiency
      if: matrix.go == '1.23.0'
      run: go test -bench=. -benchmem ./... | tee output.txt

    # Add benchmark comment step
    - name: Store benchmark result
      # Only store/comment on the primary Go version
      if: matrix.go == '1.23.0'
      uses: benchmark-action/github-action-benchmark@v1
      with:
        # What benchmark tool the output.txt file is
        tool: 'go'
        # Where the output from the benchmark tool is stored
        output-file-path: output.txt
        # Workflow will fail when an alert happens
        fail-on-alert: true
        # Name of the benchmark run
        name: Go Benchmark
        # GitHub API token
        github-token: ${{ secrets.GITHUB_TOKEN }}
        # Store/fetch data to/from the master branch instead of gh-pages
        gh-pages-branch: master
        # Push data to the data branch only on master pushes
        auto-push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        # Comment on pull requests benchmark results
        comment-on-alert: true
        summary-always: true # Always add a summary table
